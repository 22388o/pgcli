CHANGELOG
=========

0.32: 2015-04-22
----------------

New features:
- Implemented repeat arg for '{' and '}' vi key binding.
- Added autocorrection example.
- first experimental telnet interface added.
- Added contrib.validators.SentenceValidator.
- Added Layout.walk generator to traverse the layout.
- Improved 'L' and 'H' Vi key bindings.
- Implemented Vi 'zz' key binding.
- ValidationToolbar got a show_position parameter.
- When only width or hight are given for a float, the control is centered in
  the parent.
- Added beforeKeyPress and afterKeyPress events.
- Added HighlightMatchingBracketProcessor.
- SearchToolbar got a vi_mode option to show '?' and '/' instead of 'I-search'.
- Implemented vi '*' binding.
- Added onBufferChanged event to CommandLineInterface.
- Many performance improvements: some caching and not rendering after every
  single key stroke.
- Added ConditionalProcessor.
- Floating menus are now shown above the cursor, when below is not enough
  space, but above is enough space.
- Improved vi 'G' key binding.
- WindowRenderInfo got a full_height_visible, top_visible, and a few other
  attributes.
- PathCompleter got an expanduser option to do tilde expansion.

Fixed:
- Always insert indentation when pressing enter.
- vertical_srcoll should be an int instead of a float.
- Some bug fixes in renderer.Output.
- Pressing backspace in an empty search in Vi mode now goes back to navigation
  mode.
- Bug fix in TokenListControl (Correctly calculate hight for multiline
  content.)
- Only apply HighlightMatchingBracketProcessor when editing buffer.
- Ensure that floating layouts never go out of bounds.
- Home/End now go to the start and end of the line.
- Fixed vi 'c' key binding.
- Redraw the whole output when the style changes.
- Don't trigger onTextInsert when working_index doesn't change.
- Searching now wraps around the start/end of buffer/history.
- Don't go to the start of the line when moving forward in history.

Changes:
- Don't show directory/file/link in the meta information of PathCompleter anymore.
- Complete refactoring of the event loops.
- Refactoring of the Renderer and CommandLineInterface class.
- CommandLineInterface now accepts an optional Output argument.
- CommandLineInterface now accepts a use_alternate_screen parameter.
- Moved highlighting code for search/selection from BufferControl to processors.
- Completers are now always run asynchronously.
- Complete refactoring of the search. (Most responsibility move out of Buffer
  class. CommandLineInterface now got a search_state attribute.)

Backwards incompatible changes:
- get_input does now have a history attribute instead of history_filename.
- EOFError and KeyboardInterrupt is raised for abort and exit instead of custom
  exceptions.
- CommandLineInterface does no longer have a property 'is_reading_input'.
- filters.AlwaysOn/AlwaysOff have been renamed to Always/Never.
- AcceptAction has been moved from CommandLineInterface to Buffer. Now every
  buffer can define its own accept action.
- CommandLineInterface now expects an Eventloop instance in __init__.


0.31: 2015-01-30
----------------

Fixed:
- Bug in float positioning
- Show completion menu only for the default_buffer in get_input.

New features:
- PathCompleter got a get_paths parameter.
- PathCompleter sorts alphabetically.
- Added contrib.completers.SystemCompleter
- Completion got a get_display_meta parameter.


0.30: 2015-01-26
----------------

Fixed:
- Backward compatibility with django_extensions.
- Usage of alternate screen in the renderer.

New features:
- Vi '#' key binding.
- contrib.shortcuts.get_input got a get_bottom_toolbar_tokens argument.
- Separate key bindings for "open in editor." KeyBindingManager got a
  enable_open_in_editor argument.

0.28: 2015-01-25
----------------

Fixed:
- syntax error in 0.27

0.27: 2015-01-25
----------------

Backwards-incompatible changes:
- Complete refactoring of the layout system. (HSplit, VSplit, FloatContainer)
  as well as a list of controls (TokenListControl, BufferControl) in order to
  design much more complex layouts.
- ptpython code has been moved to a separate repository.

New features:
- prompt_toolkit.contrib.shortcuts.get_input has been extended.

Fixed:
- Behaviour of Control+left/right/up/down.
- Backspace in incremental search.
- Hide completion menu correctly when the cursor position changes.

0.26: 2015-01-08
----------------

Backwards-incompatible changes:
- Refactoring of the key input system. (The registry which contains the key
  bindings, the focus stack, key binding manager.) Overal much better API.
- Renamed `Line` to `Buffer`.

New features:
- Added filters as a way of disabling/enabling parts of the runtime according
  to certain conditions.
- Global clipboard, shared between all buffers.
- Added (experimental) "merge history" feature to ptpython.
- Added 'C-x r k' and 'C-x r y' emacs key bindings for cut and paste.
- Added g_, ge and gE vi key bindings.
- Added support for handling control + arrows keys.

Fixed:
- Correctly handle f1-f4 in rxvt-unicode.

0.25: 2014-12-11
----------------

Fixed:
- Package did not install on Python 2.6/2.7.

0.24: 2014-12-10
----------------

Backwards-incompatible changes:
- Completer.get_completions now gets a complete_event argument.

New features:
- For ptpython: filename completion inside Python strings.
- prompt_toolkit.contrib.regular_languages added.
- prompt_toolkit.contrib.pdb added. (Experimental PDB front-end.)
- Support for multiline toolbars.
- asyncio support added. (Integration with asyncio event loop.)
- WORD parameter added to Document.word_before_cursor.

Fixed:
- Small fixes in Win32 terminal output.
- Bug fix in parsing of CPR response.

0.23: 2014-11-28
----------------

New features:
- contrib.completers added.

Fixed:
- Improved j/k key bindings in Vi mode.
- Don't leak internal variables into ptipython shell.
- Initialize IPython extensions.
- Use IPython's prompt.
- Workarounds for Jedi crashes.

0.22: 2014-11-09
----------------

Fixed:
- Fixed missing import which caused Ctrl-Z to crash.
- Show error message for ptipython when IPython is not installed.

0.21: 2014-10-25
----------------
New features:
- Using entry_points in setup.py
- Experimental Win32 support added.

Fixed:
- Behaviour of 'r' and 'R' key bindings in Vi mode.
- Detect multiline correctly for ptpython when there are triple quoted strings.
- Some other small improvements.


0.20: 2014-10-04
----------------
Fixed:
- Workarounds for Jedi bugs.
- Better handling of window resize events.
- Fixed counter in ptipython prompt.
- Use IPythonInputSplitter.transform_cell for IPython syntax validation.
- Only insert newlines for open brackets if the cursor is at the end of the input string.

New features:
- More Vi key bindings: 'B', 'W', 'E', 'aW', 'aw' and 'iW'
- ControlZ now suspends the process


0.19: 2014-09-30
----------------
Fixed:
- Handle Jedi crashes.
- Autocompletion in `ptipython`
- Input validation in `ptipython`
- Execution of system commands (in `ptpython`) in Python 3
- Add current directory to sys.path for `ptpython`.
- Minimal jedi and six version in setup.py

New features
- Python 2.6 support
- C-C> and C-C< indent and unindent emacs key bindings.
- `ptpython` can now also run python scripts, so aliasing of `ptpython` as
  `python` will work better.

0.18: 2014-09-29
----------------
- First official (beta) release.


Jan 25, 2014
------------
first commit
